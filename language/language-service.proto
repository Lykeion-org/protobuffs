syntax = "proto3";

package language;
option go_package = "github.com/Lykeion/lexora-dictionary-service/internal/grpc/generated/language;language";

import "language/types.proto";

service LanguageService {
    //READ
    rpc GetReferent(GetReferentRequest) returns (Referent);
    rpc GetSymbol(GetSymbolRequest) returns (Symbol);
    rpc GetWord(GetWordRequest) returns (Word);
    rpc ListReferents(ListReferentsRequest) returns (ListReferentsResponse);
    rpc FindReferents(FindReferentsRequest) returns (FindReferentsResponse);

    //CREATE
    rpc CreateReferent(CreateReferentRequest) returns (Referent);
    rpc CreateSymbol(CreateSymbolRequest) returns (Symbol);
    rpc CreateWord(CreateWordRequest) returns (Word);

    //UPDATE
    rpc UpdateReferent(UpdateReferentRequest) returns (Referent);
    rpc UpdateSymbol(UpdateSymbolRequest) returns (Symbol);
    rpc UpdateWord(UpdateWordRequest) returns (Word);

    //DELETE
    rpc DeleteReferent(DeleteReferentRequest) returns (Referent);
    rpc DeleteSymbol(DeleteSymbolRequest) returns (Symbol);
    rpc DeleteWord(DeleteWordRequest) returns (Word);

    //LINKING OPERATIONS
    rpc LinkSymbolToReferent(LinkSymbolToReferentRequest) returns (LinkSymbolToReferentResponse);
    rpc LinkWordToSymbol(LinkWordToSymbolRequest) returns (LinkWordToSymbolResponse);
    rpc SetSymbolLemma(SetSymbolLemmaRequest) returns (SetSymbolLemmaResponse);    
}

//READ MESSAGES
message GetReferentRequest {
    string uid = 1;
}
message GetSymbolRequest {
    string uid = 1;
}
message GetWordRequest {
    string uid = 1;
}
message ListReferentsRequest {
    int32 page = 1;
    int32 page_size = 2;
}
message ListReferentsResponse{
    repeated Referent referents = 1;
    int32 total_count = 2;
}
enum SearchMode{
    SEARCH_MODE_UNSPECIFIED = 0;
    SEARCH_MODE_WORD = 1;
    SEARCH_MODE_SYMBOL_LEMMA = 2;
    SEARCH_MODE_ANY = 3;
}

message FindReferentsRequest {
    string query = 1;
    SearchMode search_mode = 2;
    Language language = 3;
    int32 page = 4;
    int32 page_size = 5;
}

message FindReferentsResponse {
    repeated Referent referents = 1;
    int32 total_count = 2;
}

//CREATE MESSAGES
message CreateReferentRequest {
    string en_reference = 1;
    optional string image_source = 2;
    repeated Symbol symbols = 3;
}

message CreateSymbolRequest {
    string referent_uid = 1;
    Language language = 2;
    SymbolType symbol_type = 3;
    optional Word lemma = 4;
    repeated Word words = 5;
}

message CreateWordRequest{
    string symbol_uid = 1;
    string word = 2;
    optional string sound_source = 3;
    optional string ipa = 4;
    WordType word_type = 5;
}

//UPDATE MESSAGES
message UpdateReferentRequest {
    Referent referent = 1;
}
message UpdateSymbolRequest {
    Symbol symbol = 1;
}

message UpdateWordRequest {
    Word word = 1;
}

//DELETE MESSAGES
message DeleteReferentRequest {
    string referent_uid = 1;
}
message DeleteSymbolRequest {
    string symbol_uid = 1;
}

message DeleteWordRequest {
    string word_uid = 1;
}

//LINKING OPERATIONS MESSAGES
message LinkSymbolToReferentRequest {
    string symbol_uid = 1;
    string referent_uid = 2;
}

message LinkSymbolToReferentResponse {
    bool succes = 1;
}

message LinkWordToSymbolRequest{
    string word_uid = 1;
    string symbol_uid = 2;
}

message LinkWordToSymbolResponse{
    bool succes = 1;
}

message SetSymbolLemmaRequest{
    string word_uid = 1;
    string symbol_uid = 2;
}

message SetSymbolLemmaResponse{
    bool succes = 1;
}
